# -*- mode: bash -*-
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

if [[ -d /etc/profile.d && -z $PROFILE_HAS_RUN ]]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Load local bootstrap if present

if [ -f ~/.bootstraprc ]; then
    source ~/.bootstraprc
fi

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

export LESSOPEN="| /usr/bin/lesspipe %s";
export LESSCLOSE="/usr/bin/lesspipe %s %s";

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

if which kubectl >/dev/null; then
    source <(kubectl completion bash)
fi

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Support local binaries and composer binaries
export PATH="$PATH":$HOME/.local/bin:$HOME/.config/composer/vendor/bin/:$HOME/.composer/vendor/bin

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# Load local settings if present

if [ -f ~/.localrc ]; then
    . ~/.localrc
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# If we have a msys socket file install a proxy to translate between
# the socket port and the local socket file
SOCKETFILE="${MSYS_SOCKETFILE-$HOME/.msyslockfile}"
if [[ -s $SOCKETFILE ]] && [[ -z $SSH_AUTH_SOCK ]]; then
    SSH_AUTH_DIR=`mktemp --tmpdir -d ssh-auth-XXXXX`
    export SSH_AUTH_SOCK="$SSH_AUTH_DIR/auth-sock"
    export MSYS_PROXY_SOCKET_PID="$SSH_AUTH_DIR/proxy.pid"
    # echo "Found msys socket file '$SOCKETFILE', activating proxy"
    # echo "ssh auth socket: $SSH_AUTH_SOCK"
    # echo "msys proxy pid: $MSYS_PROXY_SOCKET_PID"
    "$HOME/.dotfiles_root/linux/msysgit2unix-socket.py" --pidfile="$MSYS_PROXY_SOCKET_PID" "$SOCKETFILE:$SSH_AUTH_SOCK" 2>/dev/null
    trap "/bin/sh $HOME/.dotfiles_root/linux/msysgit2unix-socket-exit.sh $MSYS_PROXY_SOCKET_PID $SSH_AUTH_SOCK $SSH_AUTH_DIR $$" EXIT
fi

if [ "$SUPERSYSTEM" = "windows" ] && [[ -f /usr/bin/zsh ]]; then
    zsh
fi
