# -*- mode: bash -*-
# code: language=shellscript insertSpaces=true tabSize=4
# ~/.start-agent: sets up an ssh-agent if no ssh socket is present

[[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh: checking ssh-agent"


if [[ -z $SSH_AUTH_SOCK ]]; then
    SSH_AGENT_MODE=${SSH_AGENT_MODE-auto}

    # If npiperelay.exe is available use it to pipe the windows ssh-agent to WSL
    # Get it from https://github.com/jstarks/npiperelay
    if [[ $SSH_AGENT_MODE = "auto" ]]; then
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: no existing agent socket, auto configuring"
        if which npiperelay.exe >/dev/null && which socat >/dev/null; then
            [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: found npiperelay.exe (and socat), switching to npiperelay"
            export SSH_AGENT_MODE=npiperelay
        elif which keychain >/dev/null; then
            [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: found keychain, switching to keychain"
            export SSH_AGENT_MODE=keychain
        elif which keychain >/dev/null; then
            [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: found ssh-agent, switching to ssh-agent"
            export SSH_AGENT_MODE=ssh-agent
        fi
    elif [[ $SSH_AGENT_MODE != "off" ]]; then
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: no existing agent socket, checking agent $SSH_AGENT_MODE"
        if [[ $SSH_AGENT_MODE = "npiperelay" ]]; then
            if ! which npiperelay.exe >/dev/null; then
                echo "npiperelay.exe not found, please install in windows path" >&2
                export SSH_AGENT_MODE="off"
            fi
        elif [[ $SSH_AGENT_MODE = "keychain" ]]; then
            if ! which keychain >/dev/null; then
                echo "keychain not found, please install" >&2
                export SSH_AGENT_MODE="off"
            fi
        elif [[ $SSH_AGENT_MODE = "ssh-agent" ]]; then
            if ! which ssh-agent >/dev/null; then
                echo "ssh-agent not found, please install" >&2
                export SSH_AGENT_MODE="off"
            fi
        fi
    fi

    if [[ $SSH_AGENT_MODE = "npiperelay" ]]; then
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: using npiperelay, using relay to window ssh-agent"
        export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
        export SSH_AGENT_MODE=npiperelay
        if ! (ss -a | grep -q $SSH_AUTH_SOCK); then
            [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: starting relay to ssh-agent"
            rm -f $SSH_AUTH_SOCK
            mkdir -p `dirname $SSH_AUTH_SOCK`
            ( setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) >/dev/null 2>&1
            export SSH_AGENT_MODE=npiperelay-new
        else
            [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: relay to ssh-agent already present, reusing relay"
        fi
    elif [[ $SSH_AGENT_MODE = "keychain" ]]; then
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: using keychain"
        # Use keychain to reuse ssh-agent across multiple logins
        # Figure out which keys to use from $HOME/.ssh/keys
        keys=""
        if [[ -f "$HOME/.ssh/keys" ]]; then
            while IFS= read -r key; do
                key=${key/#%//}
                if [[ -n "$key" ]]; then
                    keys="$keys $HOME/.ssh/$key"
                fi
            done < "$HOME/.ssh/keys"
        fi

        if [[ -n "$keys" ]]; then
            eval `keychain -q --eval $keys`
        else
            eval `keychain -q --eval`
        fi
        export SSH_AGENT_MODE=keychain
    elif [[ $SSH_AGENT_MODE = "ssh-agent" ]]; then
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: using ssh-agent, starting new agent"
        # If not create normal ssh-agent
        eval $(ssh-agent -s) >/dev/null
        export SSH_AGENT_MODE=ssh-agent
    elif [[ $SSH_AGENT_MODE = "off" ]]; then
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: ssh agent is disabled"
    else
        [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "no ssh agent found"
    fi
else
    [[ -n "${SHELL_INIT_DEBUG-}" ]] && echo "ssh-agent: using existing agent socket"
    export SSH_AGENT_MODE=sock
fi
