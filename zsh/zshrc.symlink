# code: language=shellscript insertSpaces=true tabSize=4
DISABLE_AUTO_UPDATE="true"
ZSH_THEME="bira"
ZPLUG_INIT="$HOME/.zplug/init.zsh"
ADOTDIR="${ADOTDIR-$HOME/.antigen}"
ANTIGEN_BIN="$ADOTDIR/antigen.zsh"

# Choose from: antigen, zplug or none
PLUGIN_MANAGER="antigen"

export DISABLE_AUTO_TITLE='true'

#if [ -z "$HISTFILE" ]; then
#    HISTFILE=$HOME/.zsh_history
#fi

#HISTSIZE=10000
#SAVEHIST=10000

# Load local bootstrap if present

if [ -f ~/.bootstraprc ]; then
    source ~/.bootstraprc
fi

setopt extendedglob

# Define home/end for putty(xterm) to work
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line

# Append extra bin folders to PATH
export PATH="$HOME/.local/bin:$HOME/.poetry/bin:$HOME/bin:$PATH:$HOME/.composer/vendor/bin:$HOME/.yarn/bin"

if [ -d "$HOME/dotfiles/bin" ]; then
    export PATH="$HOME/dotfiles/bin:PATH"
fi
if [ -d "$HOME/.dotfiles/bin" ]; then
    export PATH="$HOME/.dotfiles/bin:PATH"
fi

# Kubernetes/Kubectl addons

# istioctl
# https://istio.io/latest/docs/setup/getting-started/

if [ -d "$HOME/.istio/bin" ]; then
    export PATH="$PATH:$HOME/.istio/bin"
fi

# kubectl krew
# https://github.com/kubernetes-sigs/krew/

if [ -d "$HOME/.krew/bin" ]; then
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi


# Make sure a ssh socket is present, if not start an agent
if [ -f "$HOME/.start-agent" ]; then
    source "$HOME/.start-agent"
fi

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Determine which release package to use based on current OS
if [[ $OSTYPE == *darwin* ]]; then
    ZPLUG_RELEASE_MATCH="*darwin*amd64*"
else:
    ZPLUG_RELEASE_MATCH="*linux*amd64*"
fi

# This must be set before enhancd is loaded
export ENHANCD_FILTER="fzy:peco"
export ENHANCD_DISABLE_DOT="1"

if [[ "$PLUGIN_MANAGER" == "antigen" ]]; then
    if [[ -n "${ZSH_DEBUG-}" ]]; then
        echo "Starting antigen"
    fi

    if [[ ! -f "$ANTIGEN_BIN" ]]; then
        echo "antigen not found, installing antigen to $ANTIGEN_BIN"
        mkdir -p `dirname $ANTIGEN_BIN`
        curl -sL --proto-redir -all,https git.io/antigen > "$ANTIGEN_BIN"
    fi
    if [[ -f "$ANTIGEN_BIN" ]]; then
        if [[ -f ${ADOTDIR}/.cache/.zcache-payload ]]; then
            # Load bundles statically
            source ${ADOTDIR}/.cache/.zcache-payload

            # You will need to call compinit
            autoload -Uz compinit
            compinit -d ${ADOTDIR}/.zcompdump
        else
            # If there is no cache available do load and execute antigen
            source "$ANTIGEN_BIN"
            antigen init $HOME/.antigenrc
        fi

        zle -N deer
        bindkey '\ek' deer

        if test "$CASE_SENSITIVE" = true; then
            unset HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS
        fi

        if test "$DISABLE_COLOR" = true; then
            unset HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND
            unset HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND
        fi


        # Bind terminal-specific up and down keys
        # Bind in both emacs and vi modes so it works in both, and is not
        # sensitive to whether this is loaded before or after the vi-mode plugin
        if [[ -n "$terminfo[kcuu1]" ]]; then
            bindkey -M emacs "$terminfo[kcuu1]" history-substring-search-up
            bindkey -M viins "$terminfo[kcuu1]" history-substring-search-up
        fi
        if [[ -n "$terminfo[kcud1]" ]]; then
            bindkey -M emacs "$terminfo[kcud1]" history-substring-search-down
            bindkey -M viins "$terminfo[kcud1]" history-substring-search-down
        fi

    fi
fi

if [[ "$PLUGIN_MANAGER" == "zplug" ]]; then
    if [[ -n "${ZSH_DEBUG-}" ]]; then
        echo "Starting zplug"
    fi

    ZPLUG_UPDATE_SELF=0
    if [[ -z $ZPLUG_DISABLE ]]; then
        [[ -d ~/.zplug ]] || {
            echo "zplug not found, installing zplug to ~/.zplug"
            curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
            if [[ -f "$ZPLUG_INIT" ]]; then
                ZPLUG_UPDATE_SELF=1
            else
                echo "zplug failed to install"
            fi
        }
    fi

    # zplug startup
    if [[ -f "$ZPLUG_INIT" ]]; then
        source "$ZPLUG_INIT"

        # Manage zplug itself
        zplug 'zplug/zplug', hook-build:'zplug --self-manage'

        # oh-my-zsh plugins
        zplug "lib/history", from:oh-my-zsh
        zplug "lib/clipboard", from:oh-my-zsh, if:"[[ $OSTYPE == *darwin* ]]"
        zplug "lib/compfix", from:oh-my-zsh
        zplug "lib/completion", from:oh-my-zsh, defer:2
        zplug "lib/correction", from:oh-my-zsh
        zplug "lib/key-bindings", from:oh-my-zsh

        zplug "plugins/python",   from:oh-my-zsh
        zplug "plugins/pip",   from:oh-my-zsh
        zplug "plugins/virtualenv",   from:oh-my-zsh
        zplug "plugins/perl",   from:oh-my-zsh
        zplug "plugins/httpie",   from:oh-my-zsh
        zplug "plugins/yarn",   from:oh-my-zsh
        zplug "plugins/ripgrep",   from:oh-my-zsh
        zplug "plugins/jsontools",   from:oh-my-zsh

        zplug "plugins/ansible",   from:oh-my-zsh
        zplug "plugins/docker",   from:oh-my-zsh
        zplug "plugins/docker-compose",   from:oh-my-zsh
        zplug "plugins/kubectl",   from:oh-my-zsh
        zplug "plugins/terraform",   from:oh-my-zsh

        zplug "plugins/django",   from:oh-my-zsh

        #zplug "lib/key-bindings", from:oh-my-zsh
        zplug "sorin-ionescu/prezto", use:modules/editor

        zplug "plugins/git",   from:oh-my-zsh, if:"which git"
        zplug "plugins/svn",   from:oh-my-zsh, if:"which svn"
        zplug "plugins/fabric",   from:oh-my-zsh, if:"which fabric"
        zplug "plugins/composer",   from:oh-my-zsh, if:"which php"

        zplug "zsh-users/zsh-syntax-highlighting", defer:2
        zplug "zsh-users/zsh-history-substring-search"

        # Directory listings for zsh with git features
        zplug "supercrabtree/k"

        # nodejs manager
        #zplug "tj/n", do:"make install"

        zplug "aperezdc/zsh-fzy"
        zplug "peco/peco", \
            from:gh-r, \
            as:command, \
            rename-to:peco, \
            use:"$ZPLUG_RELEASE_MATCH"
        zplug "junegunn/fzf-bin", \
            from:gh-r, \
            as:command, \
            rename-to:fzf, \
            use:"$ZPLUG_RELEASE_MATCH"
        zplug "junegunn/fzf", \
            as:command, \
            rename-to:fzf-tmux, \
            use:bin/fzf-tmux
        zplug "b4b4r07/enhancd", use:init.sh, defer:3
        zplug "zsh-users/zaw"

        # File navigation tool, alt+k
        zplug "Vifon/deer", use:deer

        #zplug "joepvd/zsh-hints", use:zsh-hints

        # Make mysql client use colors
        zplug "horosgrisa/mysql-colorize", use:mysql-colorize.plugin.zsh

        # Theme

        zplug "themes/bira",   from:oh-my-zsh

        # Can manage local plugins
        [[ -d "~/.zsh" ]] && zplug "~/.zsh", from:local

        # Install plugins if there are plugins that have not been installed
        # But only perform this check if the .zshrc file has changed since last time
        # This avoids costly checks on each invocation of zsh
        if [[ ! -f ~/.zplug_check ]] || [[ ~/.zshrc -nt ~/.zplug_check ]]; then
            if ! zplug check --verbose; then
                printf "Install? [y/N]: "
                if read -q; then
                    echo; zplug install
                fi
            fi
            touch -f ~/.zshrc ~/.zplug_check
        fi

        # Load plugins
        zplug load

        # second-stage activation for zplug plugins

        [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

        zle -N deer
        bindkey '\ek' deer

        ## Rebind keys for 'deer'
        #typeset -Ag DEER_KEYS
        #
        #DEER_KEYS[down]=^[OB
        #DEER_KEYS[page_down]=N
        #DEER_KEYS[up]=up
        #DEER_KEYS[page_up]=E
        #DEER_KEYS[enter]=^M

        #zle -N zsh-hints-param zsh-hints
        #bindkey "^Xp" zsh-hints-param
        #zle -N zsh-hints-paramflags zsh-hints
        #bindkey "^Xf" zsh-hints-paramflags
        #zle -N zsh-hints-glob zsh-hints
        #bindkey "^Xg" zsh-hints-glob

        # zsh-history-substring-search

        if test "$CASE_SENSITIVE" = true; then
            unset HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS
        fi

        if test "$DISABLE_COLOR" = true; then
            unset HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND
            unset HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND
        fi


        # Bind terminal-specific up and down keys
        # Bind in both emacs and vi modes so it works in both, and is not
        # sensitive to whether this is loaded before or after the vi-mode plugin
        if [[ -n "$terminfo[kcuu1]" ]]; then
            bindkey -M emacs "$terminfo[kcuu1]" history-substring-search-up
            bindkey -M viins "$terminfo[kcuu1]" history-substring-search-up
        fi
        if [[ -n "$terminfo[kcud1]" ]]; then
            bindkey -M emacs "$terminfo[kcud1]" history-substring-search-down
            bindkey -M viins "$terminfo[kcud1]" history-substring-search-down
        fi


        # Local plugins
        source ~/.dotfiles_root/zsh/plugins/env/env.plugin.zsh

        if [ -d "$HOME/.zplug/bin" ]; then
            export PATH="$PATH:$HOME/.zplug/bin"
        fi
    fi
fi

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Customize to your needs...

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Use nano as editor if it exists
if $(which nano >/dev/null); then
    export EDITOR="nano"
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# Check if git config is correct
if [[ -t 0 ]]; then
    if which git >/dev/null; then
        if ! git config --global --get user.name >/dev/null; then
            if [[ -n "${USER_FULL_NAME-}" ]]; then
                git_name="${USER_FULL_NAME}"
            else
                echo "No user name has been set in git config, please supply one"
                git_name=`getent passwd $USER | cut -d":" -f5 | cut -d"," -f1 | head -n 1`
                vared -p "Name: " git_name
            fi
            if [[ -n $git_name ]]; then
                git config --global user.name $git_name
            else
                echo "Skipping setting git user name"
            fi
        fi
        if ! git config --global --get user.email >/dev/null; then
            # If USER_PROJECT_EMAIL is set it used directly
            if [[ -n "${USER_PROJECT_EMAIL-}" ]]; then
                git_email="${USER_PROJECT_EMAIL-}"
            else
                echo "No user email has been set in git config, please supply one"
                # If not fallback to USER_EMAIL and allow user to interactively edit it
                git_email="${USER_EMAIL-}"
                vared -p "E-mail: " git_email
            fi
            if [[ -n $git_email ]]; then
                git config --global user.email $git_email
            else
                echo "Skipping setting git email"
            fi
        fi
    fi
fi


if [ -f ~/.aliases ]; then
    . ~/.aliases
fi

# Load local settings if present

if [ -f ~/.localrc ]; then
    . ~/.localrc
fi

if [ -e /usr/share/source-highlight/src-hilite-lesspipe.sh ]; then
    export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
fi
export LESS=' -R '

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

export PATH="$HOME/.poetry/bin:$PATH:$HOME/go/bin"
